'use strict'; var BookComponent = new function(){ let mThis = this; this.title_prop = "Books"; this.self = $("#_main_bookComponent"); this.btnNew = mThis.self.find('#_bok_btn_new'); this.tblBook = mThis.self.find('#_bok_tbl'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayBook(); } }; prepareBook((html) => { book.html = html; book.show(op); }); }); mThis.tblBook.on('click','a.btn-dpm-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayBook(); } }; prepareBook((html) => { book.html = html; book.show(op); }); }); mThis.tblBook.on('click','a.btn-dpm-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this book?',() => { api.postData('api/book/delete',op).then(res => { if(res.status === 200){ mThis.displayBook(); } }); }); }); }; this.displayBook = (onFinish = null) => { api.getData('api/book/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cols = [{ title: "Name", data: "name" }, { title: "Photo", data: (data, a, b) => { let image = data.image_url ? data.image_url : ''; return [`<img class="tbl-image" src="${image}" alt=""/>`].join(''); } }, { title: "Program", data: "program" }, { title: "Department", data: "department" }, { title: "Description", data: "description" }, { title: "Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-dpm-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square text-warning fs-5"></i> </a> <a href="javascript:void(0)" class="btn-dpm-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can text-danger fs-5"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblBook.DataTable().clear().destroy(); mThis.tblBook.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblBook.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); } if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayBook(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; let prepareBook = (onFinish = null) => { let html = null, program = null, department = null; api.getData('api/book/get-options').then(res => { let d = {}; if(res.status === 200){ d = res.data; } html = [`<div class="row gy-2"> <div class="col-lg-4"> <div class="bok-dlg-image"> <div id="bok_dlg_empty" class="bok-dlg-image-empty"> <i class="fa-regular fa-image text-muted fs-3"></i> </div> </div> </div> <div class="col-lg-8"> <div class="row row-cols-lg-2 gy-3"> <div class="col"> <div class="form-group"> <label for="name" class="form-label">Title</label> <input type="text" class="form-control data-input" data-field="name"/> </div> </div> <div class="col"> <div class="form-group"> <label for="program_id" class="form-label">Program</label> <div class="width-select-in-form"> <select class="modal-select2 data-input" data-field="program_id"> ${d && d.programs.map(option => { program = [program, `<option value="${option.id}">${option.name}</option>`].join('') }),program} </select> </div> </div> </div> <div class="col"> <div class="form-group"> <label for="department_id" class="form-label">Department</label> <div class="width-select-in-form"> <select class="modal-select2 data-input" data-field="department_id"> ${d && d.departments.map(option => { department = [department, `<option value="${option.id}">${option.name}</option>`].join('') }), department} </select> </div> </div> </div> <div class="col"> <div class="form-group"> <label for="description" class="form-label">Description</label> <textarea class="form-control data-input" data-field="description"></textarea> </div> </div> </div> </div> </div>`].join(''); if(typeof onFinish === 'function') onFinish(html); }); }; const book = new Modal({ id: 'dlg_bok_', title: 'Book', class_name: 'modal-lg', image: 'bok_dlg_empty', api_save:'api/book/save', api_modify: 'api/book/details' }); window.addEventListener('DOMContentLoaded',() => { BookComponent.init(); });'use strict'; var CertificateComponent = new function(){ let mThis = this; this.title_prop = "Certificate"; this.self = $('#_main_certificateComponent'); this.tblCertificte = mThis.self.find('#_ctf_tbl'); this.btnNew = mThis.self.find('#_ctf_btn_new'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayCertificate(); } }; certificate.show(op); }); mThis.tblCertificte.on('click','a.btn-ctf-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayCertificate(); } }; certificate.show(op); }); mThis.tblCertificte.on('click','a.btn-ctf-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this certificate?',() => { api.postData('api/certificate/delete',op).then(res => { if(res.status === 200){ mThis.displayCertificate(); } }); }); }); }; this.displayCertificate = (onFinish = null) => { api.getData('api/certificate/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cols = [{ title: "Name", data: "name" }, { title: "Photo", data: (data, a, b) => { let image = data.image_url ? data.image_url : ''; return [`<img class="tbl-image" src="${image}" alt=""/>`].join(''); } }, { title: "Description", data: "description" }, { title: "Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-ctf-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square text-warning fs-5"></i> </a> <a href="javascript:void(0)" class="btn-ctf-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can text-danger fs-5"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblCertificte.DataTable().clear().destroy(); mThis.tblCertificte.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblCertificte.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); } if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayCertificate(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; const certificate = new Modal({ id: 'dlg_ctf_', title: 'Certificate', class_name: 'modal-lg', html: [`<div class="row gy-2"> <div class="col-lg-4"> <div class="bok-dlg-image"> <div id="ctf_dlg_empty" class="bok-dlg-image-empty"> <i class="fa-regular fa-image text-muted fs-3"></i> </div> </div> </div> <div class="col-lg-8"> <div class="form-group"> <label for="name" class="form-label">Name</label> <input type="text" class="form-control data-input" data-field="name"/> </div> <div class="form-group mt-3"> <label for="description" class="form-label">Description</label> <textarea class="form-control data-input" data-field="description"></textarea> </div> </div> </div>`].join(''), image: 'ctf_dlg_empty', api_save: 'api/certificate/save', api_modify: 'api/certificate/details' }); window.addEventListener('DOMContentLoaded',() => { CertificateComponent.init(); });'use strict'; var DashboardComponent = new function () { let mThis = this; this.title_prop = "Dashboard"; this.self = $('#_main_dashboardComponent'); this.barChart = mThis.self.find('#_db_chart'); this.elCalendar = mThis.self.find('#_db_calendar'); this.init = () => {}; this.displayBarChart = (onFinish = null) => { if (mThis.chart) { mThis.chart.clear().destroy(); mThis.barChart.empty(); mThis.chart = null; } if (!mThis.chart) { mThis.chart = new Chart(mThis.barChart, { type: 'bar', data: { labels: [ 'Collections', 'Fees', 'Expenses' ], datasets: [{ label: "Fee Collection & Expenses", data: [ '90', '80', '70' ], backgroundColor: [ '#ff6384', '#36a2eb', '#cc65fe' ], borderWidth: 1 }] }, options: { scales: { y: { beginAtZero: true } }, plugins: { legend: { labels: { font: { size: 16 } } }, title: { align: 'start', position: 'top' } }, responsive: true, onResize: () => { let w = mThis.barChart.parent().width(), h = mThis.barChart.parent().height(); mThis.barChart.width(w).height(h); } } }); } if(typeof onFinish === 'function') onFinish(); }; this.show = (options) => { if (!options) options = {}; mThis.displayBarChart(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; window.addEventListener('DOMContentLoaded', () => { DashboardComponent.init(); });'use strict'; var DepartmentComponent = new function(){ let mThis = this; this.title_prop = "Department"; this.self = $('#_main_departmentComponent'); this.tblDepartment = mThis.self.find('#_dpm_tbl'); this.btnNew = mThis.self.find('#_dpm_btn_new'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayDepartment(); } }; department.show(op); }); mThis.tblDepartment.on('click','a.btn-dpm-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayDepartment(); } }; department.show(op); }); mThis.tblDepartment.on('click','a.btn-dpm-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this department?', () => { api.postData('api/department/delete', op).then(res => { if(res.status === 200){ mThis.displayDepartment(); } }); }); }); }; this.displayDepartment = (onFinish = null) => { api.getData('api/department/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cnt = 1; let cols = [{ title: "No", data: () => { return cnt++; } }, { title: "Name", data: "name" }, { title: "Created", data: "created_at" }, { title: "Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-dpm-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square text-warning fs-5"></i> </a> <a href="javascript:void(0)" class="btn-dpm-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can text-danger fs-5"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblDepartment.DataTable().clear().destroy(); mThis.tblDepartment.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblDepartment.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); }; if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayDepartment(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; const department = new Modal({ id: 'dlg_dpm', title: "Department", api_save: 'api/department/save', api_modify: 'api/department/details', html: [`<div class="form-group"> <label for="name" class="form-label">Name</label> <input type="text" class="form-control data-input" data-field="name"/> </div>`].join('') }); window.addEventListener('DOMContentLoaded', () => { DepartmentComponent.init(); });'use strict'; var LevelComponent = new function(){ let mThis = this; this.title_prop = 'Level'; this.self = $('#_main_levelComponent'); this.tblLevel = mThis.self.find('#_lvl_tbl'); this.btnNew = mThis.self.find('#_lvl_btn_new'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayLevel(); } }; prepareLevel((html) => { level.html = html; level.show(op); }); }); mThis.tblLevel.on('click','a.btn-lvl-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayLevel(); } }; prepareLevel((html)=>{ level.html = html; level.show(op); }); }); mThis.tblLevel.on('click','a.btn-lvl-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this level?',() => { api.postData('api/level/delete',op).then(res => { if(res.status === 200){ mThis.displayLevel(); } }); }); }); }; this.displayLevel = (onFinish = null) => { api.getData('api/level/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cnt = 1; let cols = [{ title: "No", data: () => { return cnt++; } }, { title: "Name", data: "name" }, { title: "Program", data: "program" }, { title: "Department", data: "department" }, { title: "Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-lvl-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square text-warning fs-5"></i> </a> <a href="javascript:void(0)" class="btn-lvl-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can text-danger fs-5"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblLevel.DataTable().clear().destroy(); mThis.tblLevel.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblLevel.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); } if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayLevel(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; let prepareLevel = (onFinish = null) => { let html = null, program = null, department = null; api.getData('api/book/get-options').then(res => { let d = {}; if(res.status === 200){ d = res.data; } html = [`<div class="form-group"> <label for="name" class="form-label">Name</label> <input type="text" class="form-control data-input" data-field="name"/> </div> <div class="form-group mt-3"> <label for="program_id" class="form-label">Program</label> <div class="width-select-in-form"> <select class="modal-select2 data-input" data-field="program_id"> ${d && d.programs.map(option => { program = [program,`<option value="${option.id}">${option.name}<option>`].join(''); }), program} </select> </div> </div> <div class="form-group mt-3"> <label for="department_id" class="form-label">Department</label> <div class="width-select-in-form"> <select class="modal-select2 data-input" data-field="department_id"> ${d && d.departments.map(option => { department = [department,`<option value="${option.id}">${option.name}<option>`].join(''); }), department} </select> </div> </div>`].join(''); if(typeof onFinish === 'function') onFinish(html); }); }; const level = new Modal({ id: 'dlg_lvl_', title: 'Level', api_save: 'api/level/save', api_modify: 'api/level/details' }); window.addEventListener('DOMContentLoaded',() => { LevelComponent.init(); });'use strict'; var MainProgramComponent = new function(){ let mThis = this; this.title_prop = "Main Program"; this.self = $('#_main_mainProgramComponent'); this.tblMainProgram = mThis.self.find('#_mpg_tbl'); this.btnNew = mThis.self.find('#_mpg_btn_new'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayMainProgram(); } }; loadFormOption((html) => { main_program.html = html; main_program.show(op); }); }); mThis.tblMainProgram.on('click','a.btn-mpg-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayMainProgram(); } }; loadFormOption((html) => { main_program.html = html; main_program.show(op); }); }); mThis.tblMainProgram.on('click','a.btn-mpg-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this main program?',() => { api.postData('api/main-program/delete',op).then(res => { if(res.status === 200){ mThis.displayMainProgram(); } }); }); }); }; this.displayMainProgram = (onFinish = null) => { api.getData('api/main-program/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cnt = 1; let cols = [{ title: "No", data: () => { return cnt++; } }, { title: "Name", data: "name" }, { title: "Department", data: "department" }, { title: "Created", data: "created_at" }, { title: "Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-mpg-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square fs-5 text-warning"></i> </a> <a href="javascript:void(0)" class="btn-mpg-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can fs-5 text-danger"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblMainProgram.DataTable().clear().destroy(); mThis.tblMainProgram.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblMainProgram.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); } if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayMainProgram(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; let loadFormOption = (onFinish = null) => { let html = null; api.getData('api/department/list').then(res => { let data = [], inner_html = null; if(res.status === 200){ data = res.data; } data.map(op => { inner_html = [inner_html, `<option value="${op.id}">${op.name}</option>`].join(''); }); html = [`<div class="form-group"> <label for="department_id" class="form-label">Department</label> <div class="width-select-in-form"> <select class="modal-select2 form-control data-input" data-field="department_id"> ${inner_html} <option selected></option> </select> </div> </div> <div class="form-group mt-3"> <label for="name" class="form-label">Name</label> <input type="text" class="form-control data-input" data-field="name"/> </div>`].join(''); if(typeof onFinish === 'function') onFinish(html); }); }; const main_program = new Modal({ id: "main_program", title: "Main Program", api_save: 'api/main-program/save', api_modify: 'api/main-program/details' }); window.addEventListener('DOMContentLoaded',() => { MainProgramComponent.init(); });'use strict'; var ServicesComponent = new function(){ let mThis = this; this.title_prop = "Services"; this.self = $('#_main_servicesComponent'); this.btnNew = mThis.self.find('#_svc_btn_new'); this.tblServices = mThis.self.find('#_svc_tbl'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayServices(); } }; service.show(op); }); mThis.tblServices.on('click','a.btn-svc-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayServices(); } }; service.show(op); }); mThis.tblServices.on('click','a.btn-svc-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this service?',() => { api.postData('api/service/delete',op).then(res => { if(res.status === 200){ mThis.displayServices(); } }); }); }); }; this.displayServices = (onFinish = null) => { api.getData('api/service/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cols = [{ title: "Name", data: "name" }, { title:"Date", data: "created_at" }, { title: "Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-svc-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square text-warning fs-5"></i> </a> <a href="javascript:void(0)" class="btn-svc-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can text-danger fs-5"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblServices.DataTable().clear().destroy(); mThis.tblServices.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblServices.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); } if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayServices(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; const service = new Modal({ id: "dlg_svc_", title: "Service", html: [`<div class="form-group"> <label for="name" class="form-label">Name</label> <input type="text" class="form-control data-input" data-field="name"/> </div>`].join(''), api_save: "api/service/save", api_modify: "api/service/details" }); window.addEventListener('DOMContentLoaded',() => { ServicesComponent.init(); });'use strict'; var UniformStudentComponent = new function(){ let mThis = this; this.title_prop = "Uniform Student"; this.self = $('#_main_ufm_StudentComponent'); this.tblUniformStudent = mThis.self.find('#_ufsd_tbl'); this.btnNew = mThis.self.find('#_ufsd_btn_new'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayUniformStudent(); } }; uniformStudent.show(op); }); mThis.tblUniformStudent.on('click','a.btn-nfsd-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayUniformStudent(); } }; uniformStudent.show(op); }); mThis.tblUniformStudent.on('click','a.btn-nfsd-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this uniform student?',() => { api.postData('api/uniform-student/delete',op).then(res => { if(res.status === 200){ mThis.displayUniformStudent(); } }); }); }); }; this.displayUniformStudent = (onFinish = null) => { api.getData('api/uniform-student/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cols = [{ title: "Photo", data: (data, a, b) => { let image = data.image_url ? data.image_url : ''; return [`<img class="tbl-image" src="${image}" alt=""/>`].join(''); } }, { title: "Sex", data: "sex" }, { title: "Description", data: "description" }, { title:"Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-nfsd-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square text-warning fs-5"></i> </a> <a href="javascript:void(0)" class="btn-nfsd-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can text-danger fs-5"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblUniformStudent.DataTable().clear().destroy(); mThis.tblUniformStudent.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblUniformStudent.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); } if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayUniformStudent(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; const uniformStudent = new Modal({ id: 'dlg_ufsd_', title: 'Uniform Student', class_name: 'modal-lg', image: 'ufsd_dlg_empty', html: [`<div class="row gy-2"> <div class="col-lg-4"> <div class="bok-dlg-image"> <div id="ufsd_dlg_empty" class="bok-dlg-image-empty"> <i class="fa-regular fa-image text-muted fs-3"></i> </div> </div> </div> <div class="col-lg-8"> <div class="form-group"> <label for="sex" class="form-label">Sex</label> <div class="width-select-in-form"> <select class="modal-select2 data-input" data-field="sex"> <option value="Male">Male</option> <option value="Female">Female</option> </select> </div> </div> <div class="form-group mt-3"> <label for="description" class="form-label">Description</label> <textarea class="form-control data-input" data-field="description"></textarea> </div> </div> </div>`].join(''), api_save: 'api/uniform-student/save', api_modify: 'api/uniform-student/details' }); window.addEventListener('DOMContentLoaded',() => { UniformStudentComponent.init(); });'use strict'; var UniformTeacherComponent = new function(){ let mThis = this; this.title_prop = 'Uniform Teacher'; this.self = $('#_main_ufm_TeacherComponent'); this.tblUniformTeacher = mThis.self.find('#_ufth_tbl'); this.btnNew = mThis.self.find('#_ufth_btn_new'); this.init = () => { mThis.btnNew.on('click',function(e){ e.preventDefault(); let op = { 'id': 0, 'onClose': () => { mThis.displayUniformTeacher(); } }; uniformTeacher.show(op); }); mThis.tblUniformTeacher.on('click','a.btn-ufth-modify',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id'), 'onClose': () => { mThis.displayUniformTeacher(); } }; uniformTeacher.show(op); }); mThis.tblUniformTeacher.on('click','a.btn-ufth-delete',function(e){ e.preventDefault(); let op = { 'id': $(this).data('id') }; interact.confirm('Delete this uniform teacher?',() => { api.postData('api/uniform-teacher/delete',op).then(res => { if(res.status === 200){ mThis.displayUniformTeacher(); } }); }); }); }; this.displayUniformTeacher = (onFinish = null) => { api.getData('api/uniform-teacher/list').then(res => { let data = []; if(res.status === 200){ data = res.data; } let cols = [{ title: "Photo", data: (data, a, b) => { let image = data.image_url ? data.image_url : ''; return [`<img class="tbl-image" src="${image}" alt=""/>`].join(''); } }, { title: "Sex", data: "sex" }, { title: "Description", data: "description" }, { title: "Action", data: (data, a, b) => { return [`<div class="d-flex gap-2"> <a href="javascript:void(0)" class="btn-ufth-modify" data-id="${data.id}"> <i class="fa-regular fa-pen-to-square text-warning fs-5"></i> </a> <a href="javascript:void(0)" class="btn-ufth-delete" data-id="${data.id}"> <i class="fa-regular fa-trash-can text-danger fs-5"></i> </a> </div>`].join(''); } }]; if(mThis.table){ mThis.tblUniformTeacher.DataTable().clear().destroy(); mThis.tblUniformTeacher.empty(); mThis.table = null; } if(!mThis.table){ mThis.table = mThis.tblUniformTeacher.DataTable({ searching: false, destroy: true, paging: true, ordering: false, retrive: true, info: true, pageLength: 5, bLengthChange: false, saveState: true, processing: true, language: { loadingRecords: "&nbsp", processing: "Loading...", emptyTable:"No data to display" }, data: data, columns: cols, createdRow: (row, data, dataIndex) => { let tr = $(row); tr.data("id", data.id); } }); } if(typeof onFinish === 'function') onFinish(); }); }; this.show = (options) => { if(!options) options = {}; mThis.displayUniformTeacher(() => { main_view.setTitle(mThis.title_prop); mThis.self.show().siblings().hide(); }); }; }; const uniformTeacher = new Modal({ id: 'dlg_ufth_', title: 'Uniform Teacher', class_name: 'modal-lg', image: 'ufth_dlg_empty', html: [`<div class="row gy-2"> <div class="col-lg-4"> <div class="bok-dlg-image"> <div id="ufth_dlg_empty" class="bok-dlg-image-empty"> <i class="fa-regular fa-image text-muted fs-3"></i> </div> </div> </div> <div class="col-lg-8"> <div class="form-group"> <label for="sex" class="form-label">Sex</label> <div class="width-select-in-form"> <select class="modal-select2 data-input" data-field="sex"> <option value="Male">Male</option> <option value="Female">Female</option> </select> </div> </div> <div class="form-group mt-3"> <label for="description" class="form-label">Description</label> <textarea class="form-control data-input" data-field="description"></textarea> </div> </div> </div>`].join(''), api_save: 'api/uniform-teacher/save', api_modify: 'api/uniform-teacher/details' }); window.addEventListener('DOMContentLoaded',() => { UniformTeacherComponent.init(); });class API{ async getData(apiUrl) { let api = [document.baseURI, apiUrl].join(''); const response = await fetch(api,{ method: 'POST', headers: { 'Content-Type': 'application/json' } }); const data = await response.json(); return data; } async postData(apiUrl, payLoad){ let api = [document.baseURI, apiUrl].join(''); const response = await fetch(api, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payLoad) }); const data = await response.json(); return data; } }; const api = new API();class Interact{ __constructor(){} confirm = (title, callback=null) => { Swal.fire({ title: title, icon: 'question', iconHtml: '؟', confirmButtonColor: '#d33', cancelButtonColor: '#3085d6', confirmButtonText: 'Delete', cancelButtonText: 'Cancel', showCancelButton: true, showCloseButton: true }).then((result) => { if(result.isConfirmed){ callback && callback(); } }); } }; const interact = new Interact();window.addEventListener('load', () => { $.fn.modal.Constructor.prototype._enforceFocus = function(){}; $(document).find('select.select2').select2({ width: 'resolve' }).on('select2:close', function(e){ if(Validator){ if(typeof Validator.onLostFocus_select2 === 'function') Validator.onLostFocus_select2($(this)); } }); $(document).find('select.modal-select2').select2({ width: '100%' }).on('select2:close',function(e){ if(Validator){ if(typeof Validator.onLostFocus_select2 === 'function') Validator.onLostFocus_select2($(this)); } }); });