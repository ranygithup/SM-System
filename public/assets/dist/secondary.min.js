class ExpandableRow{ constructor(tbl,options={ 'dontOnClick': dontOnClick }){ this.tbl = tbl; this.dontOnClick = options.dontOnClick; this.addEventClick(); }; addEventClick = () => { let tr = this.tbl.find('tbody > tr'); let clicks = this.dontOnClick; tr.off('click').on('click',function(e){ e.preventDefault(); if(clicks.length > 0){ for(let i=0; i < clicks.length; i++){ if($(e.target.parentNode).hasClass(`${clicks[i]}`)){ return; } } } let details_row_id = ['details_row',$(this).data('id')].join('_'); let tr_next = $(this).next(); let tr_next_siblings = $(this).siblings(); if(tr_next.attr("id") == details_row_id){ tr_next.remove(); } else{ $(this).after(`<tr id="${details_row_id}" class="tr-expendable"> <td colspan="100%"> <div class="container-expendable p-3 border rounded-3"></div> </td> </tr>`); } tr_next_siblings.each(function(){ if($(this).hasClass('tr-expendable')){ this.remove(); } }); }); }; };class FileChooser{ createInput = (callback) => { let input = document.createElement('input'); input.type = 'file'; input.accept = 'image/*'; input.style.display = 'none'; document.body.appendChild(input); input.addEventListener('change',(e) => { const file = e.target.files[0]; const reader = new FileReader(); reader.onload = function(e){ const dataURL = e.target.result; callback && callback(dataURL); }; reader.readAsDataURL(file); }); input.click(); input.remove(); }; chooseFile = (callback) => { this.createInput((base64) => { callback && callback(base64); }); }; }; const file = new FileChooser();window.addEventListener('DOMContentLoaded', () => { let list_menu = $('#list_menu_toggle'), container = $('#container_toggle'); $('#toggle_aside').on('click',function(e){ e.preventDefault(); if(list_menu.hasClass('menu-layout-icons')){ list_menu.removeClass('menu-layout-icons').addClass('menu-layout'); container.removeClass('container-layout-icons').addClass('container-layout'); } else{ list_menu.removeClass('menu-layout').addClass('menu-layout-icons'); container.removeClass('container-layout').addClass('container-layout-icons'); } }); let div_user = $('#tnc_toggle_usg'), icons_user = $('#tnc_toggle_user'); icons_user.on('click',function(e){ e.preventDefault(); div_user.toggle('slow'); }); $(document).on('mouseup',function(e){ e.preventDefault(); if(!div_user.is(e.target) && div_user.has(e.target).length === 0 && !icons_user.is(e.target)){ div_user.hide('slow'); } }); });class MainView{ setTitle = (title_prop) => { let title = $('#screen_title'); title.text(title_prop); }; }; const main_view = new MainView(); class Menu{ constructor(id, list_menu=[]){ this.id = id; this.menu = list_menu; this.renderMenu(); }; renderMenu = () => { let baseURI = document.location.origin; let html = ['<ul>'].join(''); if(this.menu.length > 0){ this.menu.map(list => { let subHtml = null; if(list.sub_menu && list.sub_menu.length > 0){ list.sub_menu.map(sub_list => { subHtml = [subHtml,`<li data-component="${sub_list.component}" class="menu-clickable"> <span class="pe-2"> <img class="mnu_icons_" src="${baseURI}/icons/${sub_list.icon}" alt=""/> </span> <span class="list-menu-title">${sub_list.name}</span> </li>`].join(''); }); } html = [html,`<li ${list.component ? `data-component="${list.component}" class="menu-clickable"`:`class="menu-dropdown"`}> <span class="pe-2"> <img class="mnu_icons_" src="${baseURI}/icons/${list.icon}" alt=""/> </span> <span class="list-menu-title">${list.name}</span> ${list.component ? '':`<span class="float-end"> <i class="fa-solid fa-chevron-right sign-down"></i> </span>`} ${subHtml ? `<div class="sub-list-menu"><ul>${subHtml}</ul></div>`:''} </li>`].join(''); }); } html = [html,'</ul>'].join(''); let div = document.querySelector(`#${this.id}`); div.innerHTML = html; let menu = $(div).find('.menu-clickable'); let dropdown = $(div).find('.menu-dropdown'); menu.on('click',function(e){ e.preventDefault(); $(this).addClass('menu-selected').siblings().removeClass('menu-selected'); let component = $(this).data('component'), com = window[component]; com.show(null); }); menu.first().trigger('click'); dropdown.on('click',function(e){ e.preventDefault(); let div = $(this).find('.sub-list-menu'); if(!div.is(e.target) && div.has(e.target).length !== 0){ return false; } else{ $(this).toggleClass('dropdown-open').siblings().removeClass(['dropdown-open','menu-selected']); } }); }; };class Modal{ constructor(options={ 'id': id, 'title': title, 'class_name': class_name, 'image': image, 'html': html, 'api_save': api_save, 'api_modify': api_modify, }){ this.id = options.id, this.title = options.title, this.cls_name = options.class_name, this.image = options.image, this.html = options.html, this.api_save = options.api_save, this.api_modify = options.api_modify, this.data_id = 0; this.onClose = null; this.photo = null; }; renderModal = () => { let modal = document.createElement('div'); let op = { 'id': this.id, 'tabindex': -1, 'class': 'modal fade', 'aria-labelledby': this.id+'_title', 'aria-hidden': true, 'data-bs-backdrop': 'static', 'data-bs-keyboard': 'false' }; const entries = Object.entries(op); entries.forEach(([key, value]) => modal.setAttribute(key,value)); let html = [`<div class="modal-dialog modal-dialog-scrollable ${this.cls_name ? this.cls_name : ''}"> <div class="modal-content"> <div class="modal-header"> <h4 class="modal-title">${this.m_title ? this.m_title : this.title}</h4> <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> </div> <div class="modal-body">${this.html ? this.html : ''}</div> <div class="modal-footer"> <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button> <button id="${this.id+'_btn_save'}" class="btn btn-primary" type="button">Save</button> </div> </div> </div>`].join(''); modal.innerHTML = html; document.body.appendChild(modal); if(this.image) this.imageRender(modal); $(`#${this.id}`).find(".modal-select2").select2({ tags: true, allowClear: true, placeholder: 'Select an option', dropdownParent: $(`#${this.id}`) }); $(`#${this.id}`).on('hidden.bs.modal',function(e){ e.preventDefault(); $(this).empty().remove(); let body = document.body; body.removeAttribute('style'); body.removeAttribute('class'); }); $(`#${this.id+'_btn_save'}`).on('click',(e) => { e.preventDefault(); let p = this.getDataForm(); api.postData(this.api_save, p).then(res => { if(res.status === 200){ $(`#${this.id}`).modal('hide'); this.onClose && this.onClose(); } }); }); }; getDataForm = () => { let p = { 'id': this.data_id }; $(`#${this.id}`).find('.data-input').each(function(){ let el = $(this); let f = el.data('field'); p[f] = el.val(); }); p.photo = this.photo; return p; }; setDataForm = (d) => { d = d ? d : {}; if(this.image && d.image_url){ this.setImage($(`#${this.id}`), d.image_url); } $(`#${this.id}`).find('.data-input').each(function(){ let el = $(this); let f = el.data('field'); if(el.is('select')) el.val(d[f]).trigger('change'); else el.val(d[f]); }); this.addOption(d); }; loadDataDetails = (op) => { api.postData(this.api_modify,{'id': op.id}).then(res => { let data = {}; if(res.status === 200){ data = res.data; } this.setDataForm(data); }); }; setImage = (con, image) => { let btn_image = this.image; let btn_delete = [this.image,'_delete'].join(''); let div = con.find(`#${btn_image}`).parent(); this.isUrl(image, (d) => { if(d){ this.convertImageToBase64(image,(base64) => { this.photo = base64; }); } }); let html = [`<image class="w-100 h-100 rounded-3 data-input" src="${image}" alt="" data-field="photo"/> <div class="image-options"> <i id="${btn_delete}" class="fa-regular fa-trash-can text-danger fs-5"></i> </div>`].join(''); div.html(html); div.find(`#${btn_delete}`).on('click',(e) => { e.preventDefault(); let container_image = $(`#${btn_delete}`).closest('.bok-dlg-image'); this.photo = null; container_image.html([`<div id="${btn_image}" class="bok-dlg-image-empty"> <i class="fa-regular fa-image text-muted fs-3"></i> </div>`].join('')); this.imageRender(con); }); }; imageRender = (con) => { let btn_image = this.image; let btn_delete = [this.image,'_delete'].join(''); $(con).find(`#${btn_image}`).on('click',(e) => { e.preventDefault(); file.chooseFile((image) => { this.photo = image; let div = $(`#${btn_image}`).parent(); let html = [`<image class="w-100 h-100 rounded-3 data-input" src="${image}" alt="" data-field="photo"/> <div class="image-options"> <i id="${btn_delete}" class="fa-regular fa-trash-can text-danger fs-5"></i> </div>`].join(''); div.html(html); div.find(`#${btn_delete}`).on('click',(e) => { e.preventDefault(); let container_image = $(`#${btn_delete}`).closest('.bok-dlg-image'); container_image.html([`<div id="${btn_image}" class="bok-dlg-image-empty"> <i class="fa-regular fa-image text-muted fs-3"></i> </div>`].join('')); this.imageRender(con); }); }); }); }; convertImageToBase64 = (url, callback) => { let image = new Image(); image.crossOrigin = 'anonymous'; image.onload = function(){ const canvas = document.createElement('canvas'); canvas.width = this.naturalWidth; canvas.height = this.naturalHeight; canvas.getContext('2d').drawImage(this, 0, 0); const dataUrl = canvas.toDataURL('image/png'); callback && callback(dataUrl); canvas.remove(); }; image.src = url; }; isUrl = (url, callback) => { const urlRegex = /^(https?|ftp):\/\/[^\s/$.?].[^\s]*$/i; callback && callback(urlRegex.test(url)); }; addOption = () => {}; show = (op) => { this.data_id = op.id; this.onClose = op.onClose; if(this.data_id > 0){ this.m_title = ['Modify',this.title].join(' '); this.renderModal(); this.loadDataDetails(op); } else{ this.m_title = ['New',this.title].join(' '); this.renderModal(); this.setDataForm(null); } $(`#${this.id}`).modal('show'); }; };window.addEventListener('DOMContentLoaded', () => { let menus_list = [ { 'name':'Dashboard', 'component':'DashboardComponent', 'icon':'dashboard.png' }, { 'name':'Department', 'component':'DepartmentComponent', 'icon':'department.png' }, { 'name':'Level', 'component':'LevelComponent', 'icon':'level.png' }, { 'name':'Main Program', 'component':'MainProgramComponent', 'icon':'main_programs.png' }, { 'name':'Services', 'component':'ServicesComponent', 'icon':'service.png' }, { 'name':'Books', 'component':'BookComponent', 'icon':'book.png' }, { 'name':'Invoices', 'component':'InvoicesComponent', 'icon':'invoice.png' }, { 'name':'Receipt', 'component':'ReceiptComponent', 'icon':'receipt.png' }, { 'name':'Certificate', 'component':'CertificateComponent', 'icon':'certificate.png' }, { 'name':'Uniform', 'icon':'uniform.png', 'sub_menu':[ { "name":"Students", "component":"UniformStudentComponent", "icon":"uniform.png" }, { "name":"Teacher", "component":"UniformTeacherComponent", "icon":"uniform.png" } ] }, { 'name':'Score', 'component':'ScoreComponent', 'icon':'score.png' }, { 'name':'Attendance', 'icon':'attendance.png', 'sub_menu': [ { "name":"Teacher", "component":"TeacherAttendanceComponent", "icon":"teacher_list.png" }, { "name":"Student", "component":"StudentAttendanceComponent", "icon":"student_list.png" } ] }, { 'name':'Student List', 'component':'StudentListComponent', 'icon':'student_list.png' }, { 'name':'Teacher List', 'component':'TeacherListComponent', 'icon':'teacher_list.png' }, { 'name':'Job Opportunity', 'component':'JobOpportunityComponent', 'icon':'job_opportunity.png' }, { 'name':'Branch and Location', 'component':'BranchAndLocationComponent', 'icon':'branch_and_location.png' }, { 'name':'User Management', 'icon':'user_management.png', 'sub_menu':[ { "name":"Manage Role", "component":"Management Role", "icon":"user_management.png" }, { "name":"Manage User", "component":"Management User", "icon":"user_management.png" } ] }, { 'name':'Mobile Setting', 'component':'MobileSettingsComponent', 'icon':'mobile_setting.png' }, { 'name':'Log Out', 'component':'LogOutComponent', 'icon':'logout.png' } ]; const menu = new Menu('list_menus',menus_list); });class Utils{ constructor(){} setComboItems(elSelect, data, value, text, def_value=null){ let options = null; if(def_value){ let d = data ? data : []; d.map(option => { options = [options, `<option value="${option[value]}">${option[text]}</option>`].join(''); }); elSelect.html(options); elSelect.val(def_value).trigger('change'); } else{ let d = data ? data : []; d.map(option => { options = [options, `<option value="${option[value]}">${option[text]}</option>`].join(''); }); options = [options,`<option selected></option>`].join(''); elSelect.html(options); } } }; const util = new Utils();